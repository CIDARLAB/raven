/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDSViewerFrame.java
 *
 * Created on Jun 17, 2012, 11:38:44 PM
 */
package sdsviewer;

import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;
import accessibility.ClothoReader;
import algorithms.nonmodasm.SRSBioBricks;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import algorithms.SRSAlgorithmCore;
import algorithms.modasm.SRSGoldenGate;
import algorithms.modasm.SRSMoClo;
import algorithms.nonmodasm.SRSCPEC;
import algorithms.nonmodasm.SRSGibson;
import algorithms.nonmodasm.SRSSLIC;
import datastructures.*;
import org.clothocad.tool.weyekin.WeyekinPoster;
import eugene.EugeneExecutor;
import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author Tao
 */
public class SDSViewerFrame extends javax.swing.JFrame {

    /**
     * SDSViewerFrame constructor *
     */
    public SDSViewerFrame() {
        initComponents();

    }

    /**
     * ************************************************************************
     *
     * VIEWER BUTTON ACTIONS
     *
     *************************************************************************
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectIntermediatesTable = new javax.swing.JTable();
        selectForbidden = new javax.swing.JButton();
        selectRequired = new javax.swing.JButton();
        selectRecommended = new javax.swing.JButton();
        deselectAll = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        libraryVectorTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        partLibraryTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        taFileContents = new java.awt.TextArea();
        label3 = new java.awt.Label();
        jPanel3 = new javax.swing.JPanel();
        lblStats = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblExecutionTime = new javax.swing.JLabel();
        lblSteps = new javax.swing.JLabel();
        lblStages = new javax.swing.JLabel();
        lblGoalParts = new javax.swing.JLabel();
        lblSharing = new javax.swing.JLabel();
        lblEfficiency = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblRecommended = new javax.swing.JLabel();
        lblModularity = new javax.swing.JLabel();
        loadButton = new javax.swing.JToggleButton();
        algorithmSelector = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        compositePartList = new javax.swing.JList();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lblReactions = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(SDSViewerFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setName("jPanel1"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel4.setName("jPanel4"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        selectIntermediatesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Intermediate", "Length", "Req", "Rec", "Forbidden", "Discouraged"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectIntermediatesTable.setName("selectIntermediatesTable"); // NOI18N
        jScrollPane1.setViewportView(selectIntermediatesTable);

        selectForbidden.setText(resourceMap.getString("selectForbidden.text")); // NOI18N
        selectForbidden.setMaximumSize(new java.awt.Dimension(147, 23));
        selectForbidden.setMinimumSize(new java.awt.Dimension(147, 23));
        selectForbidden.setName("selectForbidden"); // NOI18N
        selectForbidden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectForbiddenActionPerformed(evt);
            }
        });

        selectRequired.setText(resourceMap.getString("selectRequired.text")); // NOI18N
        selectRequired.setName("selectRequired"); // NOI18N
        selectRequired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRequiredActionPerformed(evt);
            }
        });

        selectRecommended.setText(resourceMap.getString("selectRecommended.text")); // NOI18N
        selectRecommended.setMaximumSize(new java.awt.Dimension(147, 23));
        selectRecommended.setMinimumSize(new java.awt.Dimension(147, 23));
        selectRecommended.setName("selectRecommended"); // NOI18N
        selectRecommended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRecommendedActionPerformed(evt);
            }
        });

        deselectAll.setText(resourceMap.getString("deselectAll.text")); // NOI18N
        deselectAll.setName("deselectAll"); // NOI18N
        deselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(selectRequired)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectRecommended, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectForbidden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deselectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deselectAll, selectForbidden, selectRecommended, selectRequired});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deselectAll)
                        .addComponent(selectForbidden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectRecommended, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectRequired))
                .addContainerGap())
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel4.TabConstraints.tabTitle"), jPanel4); // NOI18N

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        libraryVectorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Left Overhang", "Right Overhang", "Resistance", "Use For All"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        libraryVectorTable.setFillsViewportHeight(true);
        libraryVectorTable.setName("libraryVectorTable"); // NOI18N
        libraryVectorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libraryVectorTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(libraryVectorTable);
        libraryVectorTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("libraryVectorTable.columnModel.title0")); // NOI18N
        libraryVectorTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("libraryVectorTable.columnModel.title1")); // NOI18N
        libraryVectorTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("libraryVectorTable.columnModel.title2")); // NOI18N
        libraryVectorTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("libraryVectorTable.columnModel.title3")); // NOI18N
        libraryVectorTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("libraryVectorTable.columnModel.title4")); // NOI18N

        jTabbedPane1.addTab(resourceMap.getString("jScrollPane5.TabConstraints.tabTitle"), jScrollPane5); // NOI18N

        jPanel5.setName("jPanel5"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        partLibraryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Length", "Left Overhang", "Right Overhang", "Use In Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        partLibraryTable.setFillsViewportHeight(true);
        partLibraryTable.setName("partLibraryTable"); // NOI18N
        jScrollPane4.setViewportView(partLibraryTable);
        partLibraryTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("partLibraryTable.columnModel.title0")); // NOI18N
        partLibraryTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("partLibraryTable.columnModel.title1")); // NOI18N
        partLibraryTable.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("partLibraryTable.columnModel.title2")); // NOI18N
        partLibraryTable.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("partLibraryTable.columnModel.title3")); // NOI18N
        partLibraryTable.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("partLibraryTable.columnModel.title4")); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 248, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jTabbedPane1.addTab(resourceMap.getString("jPanel5.TabConstraints.tabTitle"), jPanel5); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setName("jPanel2"); // NOI18N

        taFileContents.setEditable(false);
        taFileContents.setFont(resourceMap.getFont("taFileContents.font")); // NOI18N
        taFileContents.setName("taFileContents"); // NOI18N

        label3.setFont(resourceMap.getFont("label3.font")); // NOI18N
        label3.setName("label3"); // NOI18N
        label3.setText(resourceMap.getString("label3.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taFileContents, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taFileContents, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(643, 276));

        lblStats.setFont(resourceMap.getFont("lblStats.font")); // NOI18N
        lblStats.setText(resourceMap.getString("lblStats.text")); // NOI18N
        lblStats.setName("lblStats"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        lblExecutionTime.setFont(resourceMap.getFont("lblExecutionTime.font")); // NOI18N
        lblExecutionTime.setForeground(resourceMap.getColor("lblExecutionTime.foreground")); // NOI18N
        lblExecutionTime.setText(resourceMap.getString("lblExecutionTime.text")); // NOI18N
        lblExecutionTime.setName("lblExecutionTime"); // NOI18N

        lblSteps.setFont(resourceMap.getFont("lblSteps.font")); // NOI18N
        lblSteps.setForeground(resourceMap.getColor("lblSteps.foreground")); // NOI18N
        lblSteps.setText(resourceMap.getString("lblSteps.text")); // NOI18N
        lblSteps.setName("lblSteps"); // NOI18N

        lblStages.setFont(resourceMap.getFont("lblStages.font")); // NOI18N
        lblStages.setForeground(resourceMap.getColor("lblStages.foreground")); // NOI18N
        lblStages.setText(resourceMap.getString("lblStages.text")); // NOI18N
        lblStages.setName("lblStages"); // NOI18N

        lblGoalParts.setFont(resourceMap.getFont("lblGoalParts.font")); // NOI18N
        lblGoalParts.setForeground(resourceMap.getColor("lblGoalParts.foreground")); // NOI18N
        lblGoalParts.setText(resourceMap.getString("lblGoalParts.text")); // NOI18N
        lblGoalParts.setName("lblGoalParts"); // NOI18N

        lblSharing.setFont(resourceMap.getFont("lblSharing.font")); // NOI18N
        lblSharing.setForeground(resourceMap.getColor("lblSharing.foreground")); // NOI18N
        lblSharing.setText(resourceMap.getString("lblSharing.text")); // NOI18N
        lblSharing.setName("lblSharing"); // NOI18N

        lblEfficiency.setFont(resourceMap.getFont("lblEfficiency.font")); // NOI18N
        lblEfficiency.setForeground(resourceMap.getColor("lblEfficiency.foreground")); // NOI18N
        lblEfficiency.setText(resourceMap.getString("lblEfficiency.text")); // NOI18N
        lblEfficiency.setName("lblEfficiency"); // NOI18N

        runButton.setText(resourceMap.getString("runButton.text")); // NOI18N
        runButton.setName("runButton"); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jLabel14.setFont(resourceMap.getFont("jLabel14.font")); // NOI18N
        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        jLabel15.setFont(resourceMap.getFont("jLabel15.font")); // NOI18N
        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        lblRecommended.setFont(resourceMap.getFont("lblRecommended.font")); // NOI18N
        lblRecommended.setForeground(resourceMap.getColor("lblRecommended.foreground")); // NOI18N
        lblRecommended.setText(resourceMap.getString("lblRecommended.text")); // NOI18N
        lblRecommended.setName("lblRecommended"); // NOI18N

        lblModularity.setFont(resourceMap.getFont("lblModularity.font")); // NOI18N
        lblModularity.setForeground(resourceMap.getColor("lblModularity.foreground")); // NOI18N
        lblModularity.setText(resourceMap.getString("lblModularity.text")); // NOI18N
        lblModularity.setName("lblModularity"); // NOI18N

        loadButton.setText(resourceMap.getString("loadButton.text")); // NOI18N
        loadButton.setName("loadButton"); // NOI18N
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        algorithmSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MoClo", "BioBricks", "Golden Gate", "Gibson", "CPEC", "SLIC" }));
        algorithmSelector.setName("algorithmSelector"); // NOI18N
        algorithmSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmSelectorActionPerformed(evt);
            }
        });

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        compositePartList.setName("compositePartList"); // NOI18N
        compositePartList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compositePartListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(compositePartList);

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearButton.setText(resourceMap.getString("clearButton.text")); // NOI18N
        clearButton.setName("clearButton"); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        lblReactions.setFont(resourceMap.getFont("lblReactions.font")); // NOI18N
        lblReactions.setForeground(resourceMap.getColor("lblReactions.foreground")); // NOI18N
        lblReactions.setText(resourceMap.getString("lblReactions.text")); // NOI18N
        lblReactions.setName("lblReactions"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel9)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel5))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblReactions)
                            .addComponent(lblSteps)
                            .addComponent(lblStages)
                            .addComponent(lblSharing)
                            .addComponent(lblEfficiency)
                            .addComponent(lblGoalParts)
                            .addComponent(lblRecommended)
                            .addComponent(lblModularity)
                            .addComponent(lblExecutionTime))
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(saveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(runButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clearButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(loadButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(algorithmSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblStats)
                    .addComponent(jSeparator1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel14, jLabel15, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel9});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblEfficiency, lblExecutionTime, lblGoalParts, lblModularity, lblReactions, lblRecommended, lblSharing, lblStages, lblSteps});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {algorithmSelector, clearButton, loadButton, runButton, saveButton});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblStats)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lblSteps))
                            .addComponent(lblStages))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblReactions)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(lblSharing)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEfficiency)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(lblRecommended))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(lblModularity))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(lblExecutionTime)))
                            .addComponent(lblGoalParts)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(algorithmSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addComponent(jScrollPane3))
                .addGap(97, 97, 97))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {clearButton, loadButton, runButton, saveButton});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel14, jLabel15, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7, jLabel9});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblEfficiency, lblExecutionTime, lblGoalParts, lblModularity, lblReactions, lblRecommended, lblSharing, lblStages, lblSteps});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectRequiredActionPerformed(java.awt.event.ActionEvent evt) {
        //Get device file and appropriate eugene script to select required intermediates with Eugene
        compositePartToEugeneFile();
        String[] required = eugeneSriptSelect("Required");
        required = eugeneToInts(required);

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < required.length; j++) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(required[j])) {
                    model.setValueAt(true, i, 2);
                }
            }
        }
    }

    private void deselectAllActionPerformed(java.awt.event.ActionEvent evt) {
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(false, i, 2);
            model.setValueAt(false, i, 3);
            model.setValueAt(false, i, 4);
        }
    }

    private void selectRecommendedActionPerformed(java.awt.event.ActionEvent evt) {
        //Get device file and appropriate eugene script to select recommended intermediates with Eugene
        compositePartToEugeneFile();
        String[] recommended = eugeneSriptSelect("Recommended");
        recommended = eugeneToInts(recommended);

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < recommended.length; j++) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(recommended[j])) {
                    model.setValueAt(true, i, 3);
                }
            }
        }
    }

    private void selectForbiddenActionPerformed(java.awt.event.ActionEvent evt) {
        //Get device file and appropriate eugene script to select forbidden intermediates using Eugene

        compositePartToEugeneFile();
        String[] forbidden = eugeneSriptSelect("Forbidden");
        forbidden = eugeneToInts(forbidden);

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < forbidden.length; j++) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(forbidden[j])) {
                    model.setValueAt(true, i, 4);
                }
            }
        }
    }

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (compositePartList.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Please select a device to construct");
            return;
        }
        String selected = (String) algorithmSelector.getSelectedItem();
        if (selected.equals("BioBricks")) {
            try {
                //Run SDS++ algorithm
                runBioBricks();
            } catch (Exception ex) {
                Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selected.equals("Gibson")) {
            try {
                //Run SRS Gibson algorithm
                runGibson();
            } catch (Exception ex) {
                Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selected.equals("CPEC")) {
            try {
                //Run SRS CPEC algorithm
                runCPEC();
            } catch (Exception ex) {
                Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selected.equals("SLIC")) {
            try {
                //Run SRS SLIC algorithm
                runSLIC();
            } catch (Exception ex) {
                Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selected.equals("MoClo")) {
            try {
                //Run SRS MoClo algorithm
                runMoClo();
            } catch (Exception ex) {
                Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selected.equals("Golden Gate")) {
            try {
                //Run SRS Golden Gate algorithm
                runGoldenGate();
    //        } else if (selected.equals("Gateway")) {
    //
    //            //Run SRS Gateway algorithm
    //            runGateway();
            } catch (Exception ex) {
                Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an algorithm to run");

        }

        refreshCanvas();
    }//GEN-LAST:event_runButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {
        forcedOverhangHash = new HashMap();
        JFileChooser chooser = new JFileChooser();
        int selectValue = chooser.showOpenDialog(this);
        if (selectValue == JFileChooser.APPROVE_OPTION) {
            ArrayList<String> badLines = new ArrayList<String>();
//        if (true) {
            ArrayList<String[]> compositePartTokens = new ArrayList<String[]>();
//            File input = new File("C:\\Users\\Admin\\Documents\\moclo_reg_raven_22113.csv");
//            File input = new File("C:\\Users\\Admin\\Documents\\moclo_reg_raven.csv");
            File input = chooser.getSelectedFile();
            try {
                BufferedReader reader = new BufferedReader(new FileReader(input.getAbsolutePath()));
                String line = reader.readLine();
                line = reader.readLine(); //skip first line
                while (line != null) {
                    while (line.matches("^[\\s,]+")) {
                        line = reader.readLine();
                    }
                    String[] tokens = line.split(",");
                    int tokenCount = tokens.length; //keeps track of how many columns are filled by counting backwards
                    for (int i = tokens.length - 1; i > -1; i--) {
                        if (tokens[i].trim().matches("[\\s]*")) {
                            tokenCount--;
                        } else {
                            break;
                        }
                    }
                    if (tokenCount > 7) {
                        // store line for making composite part
                        try {
                            String[] trimmedTokens = new String[tokenCount];
                            System.arraycopy(tokens, 0, trimmedTokens, 0, tokenCount);
                            compositePartTokens.add(trimmedTokens);
                        } catch (Exception e) {
                            e.printStackTrace();
                            badLines.add(line);
                        }
                    } else if (tokenCount == 7) {
                        //create vector
                        try {
                            String name = tokens[0];
                            String sequence = tokens[1];
                            String leftOverhang = tokens[2];
                            String rightOverhang = tokens[3];
                            String resistance = tokens[5].toLowerCase().trim();
                            int level = -1;
                            try {
                                level = Integer.parseInt(tokens[6]);
                            } catch (NumberFormatException e) {
                                level = -1;
                            }
                            Vector newVector = Vector.generateVector(name, sequence);
//                            System.out.println("creating vector: " + name + " resistance: " + resistance + " LO: " + leftOverhang + " RO: " + rightOverhang + " level: " + String.valueOf(level) + " seq: " + sequence);
                            newVector.addSearchTag("LO: " + leftOverhang);
                            newVector.addSearchTag("RO: " + rightOverhang);
                            newVector.addSearchTag("Level: " + level);
                            newVector.addSearchTag("Resistance: " + resistance);
                            Boolean toBreak = !newVector.saveDefault();
                            if (toBreak) {
                                break;
                            }
                        } catch (Exception e) {
                            badLines.add(line);
                            e.printStackTrace();
                        }
                    } else if (tokenCount == 5) {
                        try {
                            //create basic part
                            String name = tokens[0].trim();
                            String sequence = tokens[1];
                            String leftOverhang = tokens[2];
                            String rightOverhang = tokens[3];
                            String type = tokens[4];
//                            System.out.println("creating basic part: " + name + " type: " + type + " LO: " + leftOverhang + " RO: " + rightOverhang + " seq: " + sequence);
                            Part newBasicPart = Part.generateBasic(name, sequence);
                            newBasicPart.addSearchTag("LO: " + leftOverhang);
                            newBasicPart.addSearchTag("RO: " + rightOverhang);
                            newBasicPart.addSearchTag("Type: " + type);
                            Boolean toBreak = !newBasicPart.saveDefault();
                            if (toBreak) {
                                break;
                            }
                        } catch (Exception e) {
                            badLines.add(line);
                            e.printStackTrace();
                        }
                    } else {
                        //poorly formed line
                        badLines.add(line);

                    }
                    line = reader.readLine();
                }
                reader.close();
                //create the composite parts
                for (String[] tokens : compositePartTokens) {
                    try {
                        ArrayList<Part> composition = new ArrayList<Part>();
                        for (int i = 7; i < tokens.length; i++) {
                            String partName = tokens[i].trim();
                            if (partName.contains("|")) {
                                String[] partNameTokens = partName.split("\\|");
                                if (forcedOverhangHash.get(tokens[0]) != null) {
                                    forcedOverhangHash.get(tokens[0]).add((i - 7) + "|" + partNameTokens[1] + "|" + partNameTokens[2]);
                                } else {
                                    ArrayList<String> toAdd = new ArrayList();
                                    toAdd.add((i - 7) + "|" + partNameTokens[1] + "|" + partNameTokens[2]);
                                    forcedOverhangHash.put(tokens[0], toAdd);
                                }
                                partName = partNameTokens[0];
                            }
                            composition.add(Collector.getPartByName(partName));
                        }
                        String name = tokens[0];
                        String leftOverhang = tokens[2];
                        String rightOverhang = tokens[3];

                        Part newComposite = Part.generateComposite(composition, name);
                        newComposite.addSearchTag("LO: " + leftOverhang);
                        newComposite.addSearchTag("RO: " + rightOverhang);
                        newComposite.saveDefault();
                    } catch (NullPointerException e) {
                        String badLine = "";
                        for (int j = 0; j < tokens.length; j++) {
                            badLine = badLine + tokens[j] + ",";
                        }
                        badLines.add(badLine.substring(0, badLine.length() - 1));//trim the last period
                        e.printStackTrace();
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            //Initialize parts list    
            DefaultListModel partListModel = new DefaultListModel();
            List<String> allPartNames = new ArrayList<String>();
            ArrayList<Part> allParts = Collector.getAllParts();
            for (Part somePart : allParts) {
                if (somePart.isComposite()) {
                    allPartNames.add(somePart.getName());
                }
            }
            Collections.sort(allPartNames);
            for (String s : allPartNames) {
                partListModel.addElement(s);
            }
            compositePartList.setModel(partListModel);


            //code originally from selectCollectionsTableMouseClicked()
            //Clear the elements that might already be in the part and vector table
            int partRowCount = partLibraryTable.getModel().getRowCount();
            for (int i = 0; i < partRowCount; i++) {
                ((DefaultTableModel) partLibraryTable.getModel()).removeRow(0);
            }
            int vectorRowCount = libraryVectorTable.getModel().getRowCount();
            for (int i = 0; i < vectorRowCount; i++) {
                ((DefaultTableModel) libraryVectorTable.getModel()).removeRow(0);
            }

            //For all parts in the Collector
            for (Part part : allParts) {
                if (part.isBasic()) {
                    ArrayList<String> tags = part.getSearchTags();
                    String RO = new String();
                    String LO = new String();
                    for (int k = 0; k < tags.size(); k++) {
                        if (tags.get(k).startsWith("LO:")) {
                            LO = tags.get(k).substring(4);
                        } else if (tags.get(k).startsWith("RO:")) {
                            RO = tags.get(k).substring(4);
                        }
                    }
                    ArrayList<Part> comp = new ArrayList<Part>();
                    ArrayList<String> compNames = new ArrayList<String>();
                    try {
                        comp = ClothoReader.getComposition(part);
                        for (Part p : comp) {
                            compNames.add(p.getName());
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ((DefaultTableModel) partLibraryTable.getModel()).addRow(new Object[]{part.getName(), compNames.toString(), LO, RO, false});
                }
            }

            //For all the vectors in the collection
            ArrayList<Vector> allVectors = Collector.getAllVectors();
            for (Vector vector : allVectors) {
                ArrayList<String> tags = vector.getSearchTags();
                String resistance = new String();
                String RO = new String();
                String LO = new String();
                for (int k = 0; k < tags.size(); k++) {
                    if (tags.get(k).startsWith("Resistance:")) {
                        resistance = tags.get(k).substring(12);
                    } else if (tags.get(k).startsWith("LO:")) {
                        LO = tags.get(k).substring(4);
                    } else if (tags.get(k).startsWith("RO:")) {
                        RO = tags.get(k).substring(4);
                    }
                }

                ((DefaultTableModel) libraryVectorTable.getModel()).addRow(new Object[]{vector.getName(), LO, RO, resistance, false});
            }
            if (badLines.size() > 0) {
                //print warning about bad line
                String badLineMessage = "The following lines in your csv input was malformed. \nPlease check you input spreadsheet.";
                for (String bl : badLines) {
                    badLineMessage = badLineMessage + "\n" + bl;
                }
                JOptionPane.showMessageDialog(this, badLineMessage);


            }
        }



    }

    private void compositePartListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compositePartListMouseClicked

        //This is what is done when a composite part is selected from the list in the collection
        //Initialize all table/list values
        int[] selectedIndices = compositePartList.getSelectedIndices();
        ListModel model = compositePartList.getModel();
        ArrayList<Object[]> rowData = new ArrayList<Object[]>();
        _goalParts = new HashMap<Part, ArrayList<Part>>();
        taFileContents.setText("");
        _goalParts.clear();
        resetAll();
        String taContents = "";

        //If any composite parts are selected
        if (selectedIndices.length > 0) {
            for (int i : selectedIndices) {

                //Get selected part and its composition
                Part targetPart = Part.retrieveByExactName(model.getElementAt(i).toString());
                ArrayList<Part> composition = new ArrayList<Part>();
                try {
                    composition = ClothoReader.getComposition(targetPart);
                    _goalParts.put(targetPart, composition);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                //Populate upper left box with a composite part and its composition
                taContents = taContents + "#" + targetPart.getName() + "\n";
                for (int j = 0; j < composition.size(); j++) {
                    Part current = composition.get(j);
                    ArrayList<String> sTags = current.getSearchTags();
                    String typeTag = "(none)";
                    String LO = "(none)";
                    String RO = "(none)";
                    ArrayList<String> type = new ArrayList<String>();
                    for (int k = 0; k < sTags.size(); k++) {
                        if (sTags.get(k).startsWith("Type:")) {
                            typeTag = sTags.get(k);
                            ArrayList<String> types = SRSAlgorithmCore.parseTypeTags(typeTag);
                            type.addAll(types);
                        } else if (sTags.get(k).startsWith("LO:")) {
                            LO = sTags.get(k).substring(4);
                        } else if (sTags.get(k).startsWith("RO:")) {
                            RO = sTags.get(k).substring(4);
                        }
                    }
                    taContents = taContents + current.getName() + ", Type: " + type.toString() + ", Length: " + current.getSeq().length() + ", LO: " + LO + ", RO: " + RO + "\n";
                }

                //Display all intermediates
                HashSet<List<Part>> seenIntermediates = new HashSet();
                for (int start = 0; start < composition.size(); start++) {
                    for (int end = start + 2; end <= composition.size(); end++) {
                        List<Part> intermediate = composition.subList(start, end);
                        if (!seenIntermediates.contains(intermediate)) {
                            seenIntermediates.add(intermediate);
                            String name = "";
                            int length = 0;
                            for (Part somePart : intermediate) {
                                name = name + ", " + somePart.getName();
                                length = length + somePart.getSeq().length();
                            }
                            rowData.add(new Object[]{"[" + name.substring(2) + "]", length, false, false, false, false});//substring skips over the first comma and space
                        }
                    }
                }
            }
            taFileContents.append(taContents);
        }
        for (int i = 0; i < rowData.size(); i++) {
            ((DefaultTableModel) selectIntermediatesTable.getModel()).addRow(rowData.get(i));
        }

    }//GEN-LAST:event_compositePartListMouseClicked

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    //Save intermediates (to a collection if marked) and create graph files
    ClothoReader reader = new ClothoReader();
//    ClothoReader.refreshCompositePartList();
    ArrayList<String> graphTextFiles = new ArrayList<String>();
    for (SRSGraph result : _assemblyGraphs) {
        try {
            reader.nodesToClothoPartsVectors(result);
            reader.fixCompositeUUIDs(result);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        ////////////////////////////////////////////////////////////////////////
        //print out node information
        boolean debugging = false;
        if (debugging) {
            SRSNode root = result.getRootNode();
            ArrayList<SRSNode> queue = new ArrayList<SRSNode>();
            HashSet<SRSNode> seenNodes = new HashSet();
            queue.add(root);
            while (!queue.isEmpty()) {
                SRSNode current = queue.get(0);
                queue.remove(0);
                seenNodes.add(current);
                current.setLOverhang("");
                current.setROverhang("");
                System.out.println("------------------------------");
                System.out.println("Node: " + current.toString());
                System.out.println("Composition: " + current.getComposition());
                System.out.println("Type: " + current.getType());
                System.out.println("I have " + (current.getNeighbors().size()) + " neighbors");
                ArrayList<SRSNode> neighbors = current.getNeighbors();
                ArrayList<String> neighbornames = new ArrayList<String>();
                for (int i = 0; i < neighbors.size(); i++) {
                    neighbornames.add(neighbors.get(i).getComposition().toString());
                }
                System.out.println("Neighbors: " + current.getNeighbors());
                System.out.println("Neighbor compositions: " + neighbornames.toString());
                System.out.println("uuid: " + current.getUUID());
                System.out.println("stage: " + current.getStage());
                if (current.getVector() != null) {
                    System.out.println("vector resistance: " + current.getVector().getResistance());
                }
                System.out.println("vector: " + current.getVector());
                System.out.println("LO: " + current.getLOverhang());
                System.out.println("RO: " + current.getROverhang());
                for (SRSNode neighbor : current.getNeighbors()) {
                    if (!seenNodes.contains(neighbor)) {
                        queue.add(neighbor);
                    }
                }
            }
        }
        ////////////////////////////////////////////////////////////////////////

        //Make individual graph files
        boolean canPigeon = result.canPigeon();
        ArrayList<String> postOrderEdges = result.getPostOrderEdges();
//        graphTextFiles.add(result.generateWeyekinFile(postOrderEdges, canPigeon));
    }

    //Merge graph files and print  
    String mergedGraphText = SRSGraph.mergeWeyekinFiles(graphTextFiles);
    WeyekinPoster.setDotText(mergedGraphText);
    WeyekinPoster.postMyVision();

    //Print to file
    JFileChooser fc = new JFileChooser();
    fc.setDialogTitle("Save Parts List File...");
    int returnVal = fc.showSaveDialog(null);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        try {
            //traverse graphs to get uuids
            ArrayList<Part> usedPartsHash = new ArrayList<Part>();
            ArrayList<Vector> usedVectorsHash = new ArrayList<Vector>();
//            for (SRSGraph result : _assemblyGraphs) {
//                for (Part p : result.getPartsInGraph()) {
//                    if (!usedPartsHash.contains(p)) {
//                        usedPartsHash.add(p);
//                    }
//                }
//                for (Vector v : result.getVectorsInGraph()) {
//                    if (!usedVectorsHash.contains(v)) {
//                        usedVectorsHash.add(v);
//                    }
//                }
//            }
            //extract information from parts and write file
            FileWriter fw = new FileWriter(file);
            BufferedWriter out = new BufferedWriter(fw);
            out.write("Name,Sequence,Left Overhang,Right Overhang,Type,Resistance,Level,Composition");

            for (Part p : usedPartsHash) {
                ArrayList<String> tags = p.getSearchTags();
                String RO = "";
                String LO = "";
                String type = "";
                for (int k = 0; k < tags.size(); k++) {
                    if (tags.get(k).startsWith("LO:")) {
                        LO = tags.get(k).substring(4);
                    } else if (tags.get(k).startsWith("RO:")) {
                        RO = tags.get(k).substring(4);
                    } else if (tags.get(k).startsWith("Type:")) {
                        type = tags.get(k).substring(6);
                    }
                }

                if (p.isBasic()) {
                    out.write("\n" + p.getName() + "," + p.getSeq() + "," + LO + "," + RO + "," + type);
                } else {
                    String composition = "";
                    for (Part subpart : p.getComposition()) {
                        composition = composition + "," + subpart.getName()+"_"+subpart.getLeftOverhang()+subpart.getRightOverhang();
                    }
                    out.write("\n" + p.getName() + "," + p.getSeq() + "," + LO + "," + RO + ",composite,," + composition);
                }
            }

            for (Vector v : usedVectorsHash) {
                ArrayList<String> tags = v.getSearchTags();
                String RO = "";
                String LO = "";
                String level = "";
                String resistance = "";
                for (int k = 0; k < tags.size(); k++) {
                    if (tags.get(k).startsWith("LO:")) {
                        LO = tags.get(k).substring(4);
                    } else if (tags.get(k).startsWith("RO:")) {
                        RO = tags.get(k).substring(4);
                    } else if (tags.get(k).startsWith("Level:")) {
                        level = tags.get(k).substring(7);
                    } else if (tags.get(k).startsWith("Resistance:")) {
                        resistance = tags.get(k).substring(12);
                    }
                }
                out.write("\n" + v.getName() + "," + v.getSeq() + "," + LO + "," + RO + ",," + resistance + "," + level);
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    fc = new JFileChooser();
    fc.setDialogTitle("Save Graph Text File...");
    returnVal = fc.showSaveDialog(null);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        try {
            FileWriter fw = new FileWriter(file);
            BufferedWriter out = new BufferedWriter(fw);
            out.write(mergedGraphText);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}//GEN-LAST:event_saveButtonActionPerformed

private void algorithmSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmSelectorActionPerformed
}//GEN-LAST:event_algorithmSelectorActionPerformed

private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
}//GEN-LAST:event_jScrollPane1MouseClicked

private void libraryVectorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libraryVectorTableMouseClicked

    //Find where the box is checked
    boolean isChecked = false;
    int rowReq = 0;
    TableModel libVectorTable = libraryVectorTable.getModel();
    for (int i = 0; i < libVectorTable.getRowCount(); i++) {
        if ((Boolean) libVectorTable.getValueAt(i, 4)) {
            rowReq = i;
            isChecked = true;
        }
    }

    //If a box has been checked
    if (isChecked) {
        for (int j = 0; j < libVectorTable.getRowCount(); j++) {
            if (rowReq != j) {
                libVectorTable.setValueAt(false, j, 5);
            }
        }
    }

}//GEN-LAST:event_libraryVectorTableMouseClicked

private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
    try {
        DefaultListModel model = (DefaultListModel) compositePartList.getModel();
        //removes all rows in intermediates table
        while (model.getSize() > 0) {
            model.remove(0);
        }
        Collector.purge();
    } catch (Exception e) {
        e.printStackTrace();
    }
}//GEN-LAST:event_clearButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        TableModel model = partLibraryTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(true, i, 4);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        TableModel model = partLibraryTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(false, i, 4);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * ************************************************************************
     *
     * AUTOMATIC VIEWER REFRESHERS AND MAIN METHOD
     *
     *************************************************************************
     */
    private void refreshCanvas() {
        lblStats.setText("Statistics:");
        lblStages.setText(_statistics.getStages());
        lblSteps.setText(_statistics.getSteps());
        lblSharing.setText(_statistics.getSharing());
        lblEfficiency.setText(_statistics.getEfficiency());
        lblGoalParts.setText(_statistics.getGoalParts());
        lblRecommended.setText(_statistics.getRecommended());
        lblModularity.setText(_statistics.getModularity());
        lblExecutionTime.setText(_statistics.getExecutionTime());
        lblReactions.setText(_statistics.getReactions());
    }

    public void resetAll() {
//        tpCanvas.removeAll();
        _assemblyGraphs.clear();
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        //removes all rows in intermediates table
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        selectIntermediatesTable.setModel(model);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmSelector;
    private javax.swing.JButton clearButton;
    private javax.swing.JList compositePartList;
    private javax.swing.JButton deselectAll;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private java.awt.Label label3;
    private javax.swing.JLabel lblEfficiency;
    private javax.swing.JLabel lblExecutionTime;
    private javax.swing.JLabel lblGoalParts;
    private javax.swing.JLabel lblModularity;
    private javax.swing.JLabel lblReactions;
    private javax.swing.JLabel lblRecommended;
    private javax.swing.JLabel lblSharing;
    private javax.swing.JLabel lblStages;
    private javax.swing.JLabel lblStats;
    private javax.swing.JLabel lblSteps;
    private javax.swing.JTable libraryVectorTable;
    private javax.swing.JToggleButton loadButton;
    private javax.swing.JTable partLibraryTable;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectForbidden;
    private javax.swing.JTable selectIntermediatesTable;
    private javax.swing.JButton selectRecommended;
    private javax.swing.JButton selectRequired;
    private java.awt.TextArea taFileContents;
    // End of variables declaration//GEN-END:variables

    /**
     * Add selected recommended, required and forbidden intermediates to the
     * algorithm of choice *
     */
    private void findReqRecForbIntermediates() {
        _required = new HashSet<String>();
        _recommended = new HashSet<String>();
        _forbidden = new HashSet<String>();
        _discouraged = new HashSet<String>();
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int index = 0; index < model.getRowCount(); index++) {
            String partName = (String) model.getValueAt(index, 0);
            boolean isRequired = (Boolean) model.getValueAt(index, 2);
            boolean isRecommended = (Boolean) model.getValueAt(index, 3);
            boolean isForbidden = (Boolean) model.getValueAt(index, 4);
            boolean isDiscouraged = (Boolean) model.getValueAt(index, 5);
            if (isRequired) {
                _required.add(partName);
            }
            if (isRecommended) {
                _recommended.add(partName);
            }
            if (isForbidden) {
                _forbidden.add(partName);
            }
            if (isDiscouraged) {
                _discouraged.add(partName);
            }
        }
    }

    /**
     * Populate part library using parts in selected collections *
     */
    private ArrayList<Part> populatePartLibrary() {
        //Library of intermediates that you'd like to use in assembly
        ArrayList<Part> library = new ArrayList<Part>();
        TableModel model = partLibraryTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            if ((Boolean) model.getValueAt(i, 4)) {
                Part p = Collector.getPartByName((String) model.getValueAt(i, 0) + "|" + model.getValueAt(i, 2) + "|" + model.getValueAt(i, 3));
                if (!_goalParts.containsKey(p)) {
                    library.add(p);
                }
            }
        }
        return library;
    }

    /**
     * Populate vector library *
     */
    private ArrayList<Vector> populateVectorLibrary() {
        ArrayList<Vector> vecLib = new ArrayList<Vector>();
        //If the checkbox for a parts library is selected
        //Determine if any of the vectors are supposed to be used for all intermediates of an assembly
        TableModel model = libraryVectorTable.getModel();
        Vector useForAll = null;
        for (int i = 0; i < model.getRowCount(); i++) {
            if ((Boolean) model.getValueAt(i, 4)) {
                useForAll = Collector.getVectorByName((String) model.getValueAt(i, 0));
                break;
            }
        }
        //Look at all vectors in the collection
        if (useForAll == null) {
            vecLib.addAll(Collector.getAllVectors());
        } else {
            vecLib.add(useForAll);
        }


        return vecLib;
    }

       /**
     * Traverse a solution graph for statistics *
     */
    private void solutionStats(String method) throws Exception {

        //Initialize statistics
        boolean overhangValid = false;
        if (method.equals("biobrick")) {
            overhangValid = SRSBioBricks.validateOverhangs(_assemblyGraphs);
        } else if (method.equals("cpec")) {
            overhangValid = SRSCPEC.validateOverhangs(_assemblyGraphs);
        } else if (method.equals("gibson")) {
            overhangValid = SRSGibson.validateOverhangs(_assemblyGraphs);
        } else if (method.equals("golden gate")) {
            overhangValid = SRSGoldenGate.validateOverhangs(_assemblyGraphs);
        } else if (method.equals("moclo")) {
            overhangValid = SRSMoClo.validateOverhangs(_assemblyGraphs);
        } else if (method.equals("slic")) {
            overhangValid = SRSSLIC.validateOverhangs(_assemblyGraphs);
        }
        boolean valid = validateGraphComposition();
        valid = valid && overhangValid;
        
        int steps = 0;
        int stages = 0;
        int recCnt = 0;
        int disCnt = 0;
        int shr = 0;
        int rxn = 0;
        ArrayList<Double> effArray = new ArrayList<Double>();
        double eff = 0;
        
        if (!_assemblyGraphs.isEmpty()) {
            
            for (SRSGraph graph : _assemblyGraphs) {              
                if (graph.getStages() > stages) {
                    stages = graph.getStages();
                }
                steps = steps + graph.getSteps();
                recCnt = recCnt + graph.getReccomendedCount();
                disCnt = disCnt + graph.getDiscouragedCount();
                shr = shr + graph.getSharing();
                rxn = rxn + graph.getReaction();
                effArray.addAll(graph.getEfficiencyArray());
            }
            double sum = 0;
            
            for (Double anEff : effArray) {
                sum = sum + anEff;
            }
            eff = sum/effArray.size();
        }

        _statistics.setEfficiency(eff);
        _statistics.setRecommended(recCnt);
        _statistics.setDiscouraged(disCnt);
        _statistics.setStages(stages);
        _statistics.setSteps(steps);
        _statistics.setSharing(shr);
        _statistics.setGoalParts(_goalParts.keySet().size());
        _statistics.setExecutionTime(Statistics.getTime());
        _statistics.setReaction(rxn);
        _statistics.setValid(valid);
    }

    private boolean validateGraphComposition() throws Exception {
        boolean toReturn = true;
        HashSet<String> seenRequired = new HashSet();
        for (SRSGraph graph : _assemblyGraphs) {
            ArrayList<SRSNode> queue = new ArrayList();
            HashSet<SRSNode> seenNodes = new HashSet();
            queue.add(graph.getRootNode());
            while (!queue.isEmpty()) {
                SRSNode current = queue.get(0);
                queue.remove(0);
                seenNodes.add(current);
                if (_forbidden.contains(current.getComposition().toString())) {
                    toReturn = false;
                    break;
                }
                if (_required.contains(current.getComposition().toString())) {
                    seenRequired.add(current.getComposition().toString());
                }
                for (SRSNode neighbor : current.getNeighbors()) {
                    if (!seenNodes.contains(neighbor)) {
                        queue.add(neighbor);
                    }
                }
            }
            if (toReturn == false) {
                break;
            }
        }

        if (toReturn && _required.size() == seenRequired.size()) {
            return true;
        } else {
            return false;
        }

    }
    
    /**
     * ************************************************************************
     *
     * RUN ASSEMBLY METHODS
     *
     *************************************************************************
     */
    /**
     * Run Binary SRS algorithm *
     */
    private void runBioBricks() throws Exception {

        //Run algorithm for BioBricks assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to BioBricks algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSBioBricks biobricks = new SRSBioBricks();
        Statistics.start();
        _assemblyGraphs = biobricks.bioBricksClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, _discouraged, library, false);
        Statistics.stop();
        _assemblyGraphs = SRSGraph.mergeGraphs(_assemblyGraphs);
        ArrayList<Part> parts = new ArrayList<Part>();
        ArrayList<Vector> vecs = new ArrayList<Vector>();
        SRSGraph.getGraphStats(_assemblyGraphs, parts, vecs, _goalParts, _recommended, _discouraged, false);
        solutionStats("biobrick");

    }

    /**
     * Run SRS algorithm for Gibson *
     */
    private void runGibson() throws Exception {

        //Run algorithm for Gibson assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to Gibson algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSGibson gibson = new SRSGibson();

        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 1.0);
        efficiencies.put(5, 1.0);
        efficiencies.put(6, 1.0);
        efficiencies.put(7, 1.0);
        efficiencies.put(8, 1.0);
        efficiencies.put(9, 1.0);
        efficiencies.put(10, 1.0);
//        efficiencies.put(11, 1.0);

//        efficiencies.put(2, 1.0);
//        efficiencies.put(3, 0.8);
//        efficiencies.put(4, 0.6);
//        efficiencies.put(5, 0.4);
//        efficiencies.put(6, .15);
//        efficiencies.put(7, .03);
//        efficiencies.put(8, .01);
//        efficiencies.put(9, .004);
//        efficiencies.put(10, .002);

        Statistics.start();
        _assemblyGraphs = gibson.gibsonClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, _discouraged, library, false, efficiencies);
        Statistics.stop();
        _assemblyGraphs = SRSGraph.mergeGraphs(_assemblyGraphs);
        ArrayList<Part> parts = new ArrayList<Part>();
        ArrayList<Vector> vecs = new ArrayList<Vector>();
        SRSGraph.getGraphStats(_assemblyGraphs, parts, vecs, _goalParts, _recommended, _discouraged, true);
        solutionStats("gibson");

    }

    /**
     * Run SRS algorithm for CPEC *
     */
    private void runCPEC() throws Exception {

        //Run algorithm for CPEC assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to CPEC algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSCPEC cpec = new SRSCPEC();

        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 1.0);

        Statistics.start();
        _assemblyGraphs = cpec.cpecClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, _discouraged, library, false, efficiencies);
        Statistics.stop();
        _assemblyGraphs = SRSGraph.mergeGraphs(_assemblyGraphs);
        ArrayList<Part> parts = new ArrayList<Part>();
        ArrayList<Vector> vecs = new ArrayList<Vector>();
        SRSGraph.getGraphStats(_assemblyGraphs, parts, vecs, _goalParts, _recommended, _discouraged, true);
        solutionStats("cpec");
    }

    /**
     * Run SRS algorithm for SLIC *
     */
    private void runSLIC() throws Exception {

        //Run algorithm for SLIC assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to SLIC algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSSLIC slic = new SRSSLIC();

        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 1.0);

        Statistics.start();
        _assemblyGraphs = slic.slicClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, _discouraged, library, false, efficiencies);
        Statistics.stop();
        _assemblyGraphs = SRSGraph.mergeGraphs(_assemblyGraphs);
        ArrayList<Part> parts = new ArrayList<Part>();
        ArrayList<Vector> vecs = new ArrayList<Vector>();
        SRSGraph.getGraphStats(_assemblyGraphs, parts, vecs, _goalParts, _recommended, _discouraged, true);
        solutionStats("slic");

    }

    /**
     * Run SRS algorithm for MoClo *
     */
    private void runMoClo() throws Exception {
        if (_goalParts == null) {
            return;
        }
        //Run algorithm for MoClo assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSMoClo moclo = new SRSMoClo();

        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
//        efficiencies.put(2, 1.0);
//        efficiencies.put(3, .35);
//        efficiencies.put(4, .1);
//        efficiencies.put(5, .03);
//        efficiencies.put(6, 0.1);

        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 1.0);
        efficiencies.put(5, 1.0);
        efficiencies.put(6, 1.0);
//        efficiencies.put(7, 1.0);
//        efficiencies.put(8, 1.0);
//        efficiencies.put(9, 1.0);
        Statistics.start();
        moclo.setForcedOverhangs(forcedOverhangHash);
        _assemblyGraphs = moclo.mocloClothoWrapper(gps, null, _required, _recommended, _forbidden, _discouraged, library, false, efficiencies);
        Statistics.stop();

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (String req : _required) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(req)) {
                    model.setValueAt(true, i, 2);
                }
            }
        }

        _assemblyGraphs = SRSGraph.mergeGraphs(_assemblyGraphs);
        ArrayList<Part> parts = new ArrayList<Part>();
        ArrayList<Vector> vecs = new ArrayList<Vector>();
        SRSGraph.getGraphStats(_assemblyGraphs, parts, vecs, _goalParts, _recommended, _discouraged, false);
        solutionStats("moclo");

    }

    /**
     * Run SRS algorithm for Golden Gate *
     */
    private void runGoldenGate() throws Exception {

        //  Run algorithm for Golden Gate assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSGoldenGate gg = new SRSGoldenGate();

        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 1.0);
        efficiencies.put(5, 1.0);
        efficiencies.put(6, 1.0);

        Statistics.start();
        _assemblyGraphs = gg.goldenGateClothoWrapper(gps, null, _required, _recommended, _forbidden, _discouraged, library, true, efficiencies);
        Statistics.stop();
        _assemblyGraphs = SRSGraph.mergeGraphs(_assemblyGraphs);
        ArrayList<Part> parts = new ArrayList<Part>();
        ArrayList<Vector> vecs = new ArrayList<Vector>();
        SRSGraph.getGraphStats(_assemblyGraphs, parts, vecs, _goalParts, _recommended, _discouraged, true);
        solutionStats("golden gate");

    }

    /**
     * ************************************************************************
     *
     * EUGENE ALGORITHMS
     *
     *************************************************************************
     */
    /**
     * For selected composite parts, turn them into a parts file in Eugene code
     * *
     */
    private void compositePartToEugeneFile() {
        if (compositePartList.getSelectedIndices().length < 1) {
            return;
        }
        //Get selected composite parts and their basic parts
        HashMap<Part, ArrayList<Part>> compParts = _goalParts;
        Set<Part> keyset = compParts.keySet();
        HashSet<String> seenPartTypes = new HashSet<String>();
        HashSet<String> seenParts = new HashSet<String>();
        StringBuilder eugeneFile = new StringBuilder();
        eugeneFile.append("//PART PROPERTIES\nProperty Name(txt);\nProperty Sequence(txt);\n\n//PART TYPES\n");

        //For all composite parts in this hash, get the part properties
        for (Part gp : keyset) {
            ArrayList<Part> basicParts = compParts.get(gp);
            for (Part bp : basicParts) {
                ArrayList<String> sTags = bp.getSearchTags();
                ArrayList<String> type = new ArrayList<String>();
                String typeTag = new String();
                for (int k = 0; k < sTags.size(); k++) {
                    if (sTags.get(k).startsWith("Type:")) {
                        typeTag = sTags.get(k);
                        ArrayList<String> types = SRSAlgorithmCore.parseTypeTags(typeTag);
                        type.addAll(types);
                        typeTag = type.get(0);
                    }
                }
                if (!seenPartTypes.contains(typeTag)) {
                    eugeneFile.append("Part ").append(type).append("(Name, Sequence);\n");
                }
                seenPartTypes.add(typeTag);
            }
        }
        eugeneFile.append("\n");

        //For all composite parts in this hash, assign concrete
        for (Part gp : keyset) {
            ArrayList<Part> basicParts = compParts.get(gp);
            for (Part bp : basicParts) {
                String name = bp.getName();
                ArrayList<String> sTags = bp.getSearchTags();
                ArrayList<String> type = new ArrayList<String>();
                String typeTag = new String();
                for (int k = 0; k < sTags.size(); k++) {
                    if (sTags.get(k).startsWith("Type:")) {
                        typeTag = sTags.get(k);
                        ArrayList<String> types = SRSAlgorithmCore.parseTypeTags(typeTag);
                        type.addAll(types);
                        typeTag = type.get(0);
                    }
                }
                String seq = bp.getSeq().toString();
                if (!seenParts.contains(name)) {
                    eugeneFile.append(type).append(" ").append(name).append("(.Name(\"").append(name).append("\"), .Sequence(\"").append(seq).append("\"));\n");
                }
                seenParts.add(name);
            }
        }
        eugeneFile.append("\n");

        //Create devices
        eugeneFile.append("//GOAL PARTS\n");
        for (Part gp : keyset) {
            eugeneFile.append("Device ").append(gp.getName()).append("(");
            ArrayList<Part> basicParts = compParts.get(gp);
            for (int i = 0; i < basicParts.size(); i++) {
                String name = basicParts.get(i).getName();
                if (i == (basicParts.size() - 1)) {
                    eugeneFile.append(name);
                } else {
                    eugeneFile.append(name).append(", ");
                }
            }
            eugeneFile.append(");\n");
        }
        eugeneFile.append("\nDevice[] devices = [");

        //Create array of devices
        for (Part gp : keyset) {
            eugeneFile.append(gp.getName()).append(", ");
        }
        eugeneFile.deleteCharAt(eugeneFile.length() - 1);
        eugeneFile.deleteCharAt(eugeneFile.length() - 1);
        eugeneFile.append("];\n");

        String eugFile = eugeneFile.toString();

        //Save to file in eugenescripts package
        JFileChooser chooser = new JFileChooser();
        int showSaveDialog = chooser.showSaveDialog(this);
        if (showSaveDialog == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            try {
                FileWriter fw = new FileWriter(file);
                BufferedWriter out = new BufferedWriter(fw);
                out.write(eugFile);
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }

            //Clean up memory
            eugFile = null;
            eugeneFile = null;
            compParts = null;
            seenPartTypes = null;
            seenParts = null;
            keyset = null;
        }

    }

    /**
     * Select a Eugene file to select intermediates for algorithm *
     */
    private String[] eugeneSriptSelect(String intermediates) {
        String[] results = new String[0];

        //Pick a file
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Select Eugene " + intermediates + " Intermediate Selection File...");
        int returnVal = fc.showSaveDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File eugFile = fc.getSelectedFile();

            //Execute eugene script
            try {
                long nBefore = System.nanoTime();
                results = (String[]) EugeneExecutor.execute(eugFile, 1);
//                 1 ... print the output set to the console
//
//                System.out.println("**** RESULTS ****");
//                if (null != results) {
//                    for (int i = 0; i < results.length; i++) {
//                        System.out.println(results[i]);
//                    }
//                }
//                System.out.println("*****************");
//
//
                double nProcessing = (System.nanoTime() - nBefore) * Math.pow(10, -9);
                System.out.println("processing time: " + nProcessing + "sec");

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return results;
    }

    /**
     * Parse Eugene output text back to strings needed to match intermediates *
     */
    private String[] eugeneToInts(String[] intermediates) {

        //Go through Eugene output and convert them back to intermediate strings
        if (null != intermediates) {
            for (int i = 0; i < intermediates.length; i++) {
                String finalInt = new String();
                String anInt = intermediates[i];
                int start = anInt.indexOf("(");
                int end = anInt.indexOf(")");
                anInt = anInt.substring(start + 1, end);
                String[] tokens = anInt.split(",");
                for (int j = 0; j < tokens.length; j++) {
                    if (j == (tokens.length - 1)) {
                        finalInt = finalInt + tokens[j];
                    } else {
                        finalInt = finalInt + tokens[j] + ", ";
                    }
                }
                finalInt = "[" + finalInt + "]";
                intermediates[i] = finalInt;
            }
        }
        return intermediates;
    }
    //FIELDS
    private HashMap<Part, ArrayList<Part>> _goalParts;//key: target part, value: composition
    private HashSet<String> _required = new HashSet();
    private HashSet<String> _recommended = new HashSet();
    private HashSet<String> _forbidden = new HashSet();
    private HashSet<String> _discouraged = new HashSet();
    private Statistics _statistics = new Statistics();
    private ArrayList<SRSGraph> _assemblyGraphs = new ArrayList<SRSGraph>();
    private HashMap<String, ArrayList<String>> forcedOverhangHash;
}
